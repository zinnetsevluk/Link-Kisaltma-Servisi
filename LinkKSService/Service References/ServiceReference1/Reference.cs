//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinkKSService.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ILinkKSServiceContract")]
    public interface ILinkKSServiceContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/UserSignUp", ReplyAction="http://tempuri.org/ILinkKSServiceContract/UserSignUpResponse")]
        System.Guid UserSignUp(string name, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/UserSignUp", ReplyAction="http://tempuri.org/ILinkKSServiceContract/UserSignUpResponse")]
        System.Threading.Tasks.Task<System.Guid> UserSignUpAsync(string name, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/UserSignIn", ReplyAction="http://tempuri.org/ILinkKSServiceContract/UserSignInResponse")]
        System.Nullable<System.Guid> UserSignIn(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/UserSignIn", ReplyAction="http://tempuri.org/ILinkKSServiceContract/UserSignInResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> UserSignInAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/LinkShorten", ReplyAction="http://tempuri.org/ILinkKSServiceContract/LinkShortenResponse")]
        string LinkShorten(string longLink, System.Nullable<System.Guid> userId, string password, System.Nullable<System.DateTime> expireDate, bool notification, bool oneshot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/LinkShorten", ReplyAction="http://tempuri.org/ILinkKSServiceContract/LinkShortenResponse")]
        System.Threading.Tasks.Task<string> LinkShortenAsync(string longLink, System.Nullable<System.Guid> userId, string password, System.Nullable<System.DateTime> expireDate, bool notification, bool oneshot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/User_UpdateUser", ReplyAction="http://tempuri.org/ILinkKSServiceContract/User_UpdateUserResponse")]
        void User_UpdateUser(System.Guid userId, string name, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/User_UpdateUser", ReplyAction="http://tempuri.org/ILinkKSServiceContract/User_UpdateUserResponse")]
        System.Threading.Tasks.Task User_UpdateUserAsync(System.Guid userId, string name, string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/UpdateLinkExpireDate", ReplyAction="http://tempuri.org/ILinkKSServiceContract/UpdateLinkExpireDateResponse")]
        void UpdateLinkExpireDate(System.Guid linkId, System.Nullable<System.DateTime> expireDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/UpdateLinkExpireDate", ReplyAction="http://tempuri.org/ILinkKSServiceContract/UpdateLinkExpireDateResponse")]
        System.Threading.Tasks.Task UpdateLinkExpireDateAsync(System.Guid linkId, System.Nullable<System.DateTime> expireDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/UpdateLinkNotification", ReplyAction="http://tempuri.org/ILinkKSServiceContract/UpdateLinkNotificationResponse")]
        void UpdateLinkNotification(System.Guid linkId, bool notification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/UpdateLinkNotification", ReplyAction="http://tempuri.org/ILinkKSServiceContract/UpdateLinkNotificationResponse")]
        System.Threading.Tasks.Task UpdateLinkNotificationAsync(System.Guid linkId, bool notification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/UpdateLinkOneShot", ReplyAction="http://tempuri.org/ILinkKSServiceContract/UpdateLinkOneShotResponse")]
        void UpdateLinkOneShot(System.Guid linkId, bool oneshot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/UpdateLinkOneShot", ReplyAction="http://tempuri.org/ILinkKSServiceContract/UpdateLinkOneShotResponse")]
        System.Threading.Tasks.Task UpdateLinkOneShotAsync(System.Guid linkId, bool oneshot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/UpdateLinkPassword", ReplyAction="http://tempuri.org/ILinkKSServiceContract/UpdateLinkPasswordResponse")]
        void UpdateLinkPassword(System.Guid linkId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/UpdateLinkPassword", ReplyAction="http://tempuri.org/ILinkKSServiceContract/UpdateLinkPasswordResponse")]
        System.Threading.Tasks.Task UpdateLinkPasswordAsync(System.Guid linkId, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/GetUserProfile", ReplyAction="http://tempuri.org/ILinkKSServiceContract/GetUserProfileResponse")]
        LinkKS.DTO.DTO_USER GetUserProfile(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/GetUserProfile", ReplyAction="http://tempuri.org/ILinkKSServiceContract/GetUserProfileResponse")]
        System.Threading.Tasks.Task<LinkKS.DTO.DTO_USER> GetUserProfileAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/GetList", ReplyAction="http://tempuri.org/ILinkKSServiceContract/GetListResponse")]
        LinkKS.DTO.DTO_LINK[] GetList(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/GetList", ReplyAction="http://tempuri.org/ILinkKSServiceContract/GetListResponse")]
        System.Threading.Tasks.Task<LinkKS.DTO.DTO_LINK[]> GetListAsync(System.Guid userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/GetListLog", ReplyAction="http://tempuri.org/ILinkKSServiceContract/GetListLogResponse")]
        LinkKS.DTO.DTO_LINK_LOG[] GetListLog(System.Guid linkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/GetListLog", ReplyAction="http://tempuri.org/ILinkKSServiceContract/GetListLogResponse")]
        System.Threading.Tasks.Task<LinkKS.DTO.DTO_LINK_LOG[]> GetListLogAsync(System.Guid linkId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/GetLonkLink", ReplyAction="http://tempuri.org/ILinkKSServiceContract/GetLonkLinkResponse")]
        LinkKS.DTO.DTO_LINK_CONTROL_RESULT GetLonkLink(string shortLink);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILinkKSServiceContract/GetLonkLink", ReplyAction="http://tempuri.org/ILinkKSServiceContract/GetLonkLinkResponse")]
        System.Threading.Tasks.Task<LinkKS.DTO.DTO_LINK_CONTROL_RESULT> GetLonkLinkAsync(string shortLink);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILinkKSServiceContractChannel : LinkKSService.ServiceReference1.ILinkKSServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LinkKSServiceContractClient : System.ServiceModel.ClientBase<LinkKSService.ServiceReference1.ILinkKSServiceContract>, LinkKSService.ServiceReference1.ILinkKSServiceContract {
        
        public LinkKSServiceContractClient() {
        }
        
        public LinkKSServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LinkKSServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LinkKSServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LinkKSServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid UserSignUp(string name, string email, string password) {
            return base.Channel.UserSignUp(name, email, password);
        }
        
        public System.Threading.Tasks.Task<System.Guid> UserSignUpAsync(string name, string email, string password) {
            return base.Channel.UserSignUpAsync(name, email, password);
        }
        
        public System.Nullable<System.Guid> UserSignIn(string email, string password) {
            return base.Channel.UserSignIn(email, password);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> UserSignInAsync(string email, string password) {
            return base.Channel.UserSignInAsync(email, password);
        }
        
        public string LinkShorten(string longLink, System.Nullable<System.Guid> userId, string password, System.Nullable<System.DateTime> expireDate, bool notification, bool oneshot) {
            return base.Channel.LinkShorten(longLink, userId, password, expireDate, notification, oneshot);
        }
        
        public System.Threading.Tasks.Task<string> LinkShortenAsync(string longLink, System.Nullable<System.Guid> userId, string password, System.Nullable<System.DateTime> expireDate, bool notification, bool oneshot) {
            return base.Channel.LinkShortenAsync(longLink, userId, password, expireDate, notification, oneshot);
        }
        
        public void User_UpdateUser(System.Guid userId, string name, string email, string password) {
            base.Channel.User_UpdateUser(userId, name, email, password);
        }
        
        public System.Threading.Tasks.Task User_UpdateUserAsync(System.Guid userId, string name, string email, string password) {
            return base.Channel.User_UpdateUserAsync(userId, name, email, password);
        }
        
        public void UpdateLinkExpireDate(System.Guid linkId, System.Nullable<System.DateTime> expireDate) {
            base.Channel.UpdateLinkExpireDate(linkId, expireDate);
        }
        
        public System.Threading.Tasks.Task UpdateLinkExpireDateAsync(System.Guid linkId, System.Nullable<System.DateTime> expireDate) {
            return base.Channel.UpdateLinkExpireDateAsync(linkId, expireDate);
        }
        
        public void UpdateLinkNotification(System.Guid linkId, bool notification) {
            base.Channel.UpdateLinkNotification(linkId, notification);
        }
        
        public System.Threading.Tasks.Task UpdateLinkNotificationAsync(System.Guid linkId, bool notification) {
            return base.Channel.UpdateLinkNotificationAsync(linkId, notification);
        }
        
        public void UpdateLinkOneShot(System.Guid linkId, bool oneshot) {
            base.Channel.UpdateLinkOneShot(linkId, oneshot);
        }
        
        public System.Threading.Tasks.Task UpdateLinkOneShotAsync(System.Guid linkId, bool oneshot) {
            return base.Channel.UpdateLinkOneShotAsync(linkId, oneshot);
        }
        
        public void UpdateLinkPassword(System.Guid linkId, string password) {
            base.Channel.UpdateLinkPassword(linkId, password);
        }
        
        public System.Threading.Tasks.Task UpdateLinkPasswordAsync(System.Guid linkId, string password) {
            return base.Channel.UpdateLinkPasswordAsync(linkId, password);
        }
        
        public LinkKS.DTO.DTO_USER GetUserProfile(System.Guid userId) {
            return base.Channel.GetUserProfile(userId);
        }
        
        public System.Threading.Tasks.Task<LinkKS.DTO.DTO_USER> GetUserProfileAsync(System.Guid userId) {
            return base.Channel.GetUserProfileAsync(userId);
        }
        
        public LinkKS.DTO.DTO_LINK[] GetList(System.Guid userId) {
            return base.Channel.GetList(userId);
        }
        
        public System.Threading.Tasks.Task<LinkKS.DTO.DTO_LINK[]> GetListAsync(System.Guid userId) {
            return base.Channel.GetListAsync(userId);
        }
        
        public LinkKS.DTO.DTO_LINK_LOG[] GetListLog(System.Guid linkId) {
            return base.Channel.GetListLog(linkId);
        }
        
        public System.Threading.Tasks.Task<LinkKS.DTO.DTO_LINK_LOG[]> GetListLogAsync(System.Guid linkId) {
            return base.Channel.GetListLogAsync(linkId);
        }
        
        public LinkKS.DTO.DTO_LINK_CONTROL_RESULT GetLonkLink(string shortLink) {
            return base.Channel.GetLonkLink(shortLink);
        }
        
        public System.Threading.Tasks.Task<LinkKS.DTO.DTO_LINK_CONTROL_RESULT> GetLonkLinkAsync(string shortLink) {
            return base.Channel.GetLonkLinkAsync(shortLink);
        }
    }
}
