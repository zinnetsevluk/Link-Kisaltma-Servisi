#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinkKS.Business
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LINK")]
	public partial class LinkKSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLINK(LINK instance);
    partial void UpdateLINK(LINK instance);
    partial void DeleteLINK(LINK instance);
    partial void InsertLINK_LOG(LINK_LOG instance);
    partial void UpdateLINK_LOG(LINK_LOG instance);
    partial void DeleteLINK_LOG(LINK_LOG instance);
    partial void InsertUSER(USER instance);
    partial void UpdateUSER(USER instance);
    partial void DeleteUSER(USER instance);
    #endregion
		
		public LinkKSDataContext() : 
				base(global::LinkKS.Business.Properties.Settings.Default.LINKConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinkKSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinkKSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinkKSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinkKSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LINK> LINKs
		{
			get
			{
				return this.GetTable<LINK>();
			}
		}
		
		public System.Data.Linq.Table<LINK_LOG> LINK_LOGs
		{
			get
			{
				return this.GetTable<LINK_LOG>();
			}
		}
		
		public System.Data.Linq.Table<USER> USERs
		{
			get
			{
				return this.GetTable<USER>();
			}
		}

        public void ApplyPropertyChanges(object e)
        {
            throw new NotImplementedException();
        }
    }
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LINK")]
	public partial class LINK : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LINK_ID;
		
		private string _SHORT_LINK;
		
		private string _LONG_LINK;
		
		private System.Nullable<System.Guid> _USERID;
		
		private System.DateTime _CREATE_DATE;
		
		private string _LINK_PASSWORD;
		
		private bool _LINK_NOTIFICATION;
		
		private System.Nullable<System.DateTime> _EXPIRE_DATE;
		
		private bool _ONE_SHOT;
		
		private byte _LINK_STATUS;
		
		private EntitySet<LINK_LOG> _LINK_LOGs;
		
		private EntityRef<USER> _USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLINK_IDChanging(System.Guid value);
    partial void OnLINK_IDChanged();
    partial void OnSHORT_LINKChanging(string value);
    partial void OnSHORT_LINKChanged();
    partial void OnLONG_LINKChanging(string value);
    partial void OnLONG_LINKChanged();
    partial void OnUSERIDChanging(System.Nullable<System.Guid> value);
    partial void OnUSERIDChanged();
    partial void OnCREATE_DATEChanging(System.DateTime value);
    partial void OnCREATE_DATEChanged();
    partial void OnLINK_PASSWORDChanging(string value);
    partial void OnLINK_PASSWORDChanged();
    partial void OnLINK_NOTIFICATIONChanging(bool value);
    partial void OnLINK_NOTIFICATIONChanged();
    partial void OnEXPIRE_DATEChanging(System.Nullable<System.DateTime> value);
    partial void OnEXPIRE_DATEChanged();
    partial void OnONE_SHOTChanging(bool value);
    partial void OnONE_SHOTChanged();
    partial void OnLINK_STATUSChanging(byte value);
    partial void OnLINK_STATUSChanged();
    #endregion
		
		public LINK()
		{
			this._LINK_LOGs = new EntitySet<LINK_LOG>(new Action<LINK_LOG>(this.attach_LINK_LOGs), new Action<LINK_LOG>(this.detach_LINK_LOGs));
			this._USER = default(EntityRef<USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LINK_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LINK_ID
		{
			get
			{
				return this._LINK_ID;
			}
			set
			{
				if ((this._LINK_ID != value))
				{
					this.OnLINK_IDChanging(value);
					this.SendPropertyChanging();
					this._LINK_ID = value;
					this.SendPropertyChanged("LINK_ID");
					this.OnLINK_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SHORT_LINK", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string SHORT_LINK
		{
			get
			{
				return this._SHORT_LINK;
			}
			set
			{
				if ((this._SHORT_LINK != value))
				{
					this.OnSHORT_LINKChanging(value);
					this.SendPropertyChanging();
					this._SHORT_LINK = value;
					this.SendPropertyChanged("SHORT_LINK");
					this.OnSHORT_LINKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LONG_LINK", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LONG_LINK
		{
			get
			{
				return this._LONG_LINK;
			}
			set
			{
				if ((this._LONG_LINK != value))
				{
					this.OnLONG_LINKChanging(value);
					this.SendPropertyChanging();
					this._LONG_LINK = value;
					this.SendPropertyChanged("LONG_LINK");
					this.OnLONG_LINKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USERID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> USERID
		{
			get
			{
				return this._USERID;
			}
			set
			{
				if ((this._USERID != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUSERIDChanging(value);
					this.SendPropertyChanging();
					this._USERID = value;
					this.SendPropertyChanged("USERID");
					this.OnUSERIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CREATE_DATE", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CREATE_DATE
		{
			get
			{
				return this._CREATE_DATE;
			}
			set
			{
				if ((this._CREATE_DATE != value))
				{
					this.OnCREATE_DATEChanging(value);
					this.SendPropertyChanging();
					this._CREATE_DATE = value;
					this.SendPropertyChanged("CREATE_DATE");
					this.OnCREATE_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LINK_PASSWORD", DbType="NVarChar(20)")]
		public string LINK_PASSWORD
		{
			get
			{
				return this._LINK_PASSWORD;
			}
			set
			{
				if ((this._LINK_PASSWORD != value))
				{
					this.OnLINK_PASSWORDChanging(value);
					this.SendPropertyChanging();
					this._LINK_PASSWORD = value;
					this.SendPropertyChanged("LINK_PASSWORD");
					this.OnLINK_PASSWORDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LINK_NOTIFICATION", DbType="Bit NOT NULL")]
		public bool LINK_NOTIFICATION
		{
			get
			{
				return this._LINK_NOTIFICATION;
			}
			set
			{
				if ((this._LINK_NOTIFICATION != value))
				{
					this.OnLINK_NOTIFICATIONChanging(value);
					this.SendPropertyChanging();
					this._LINK_NOTIFICATION = value;
					this.SendPropertyChanged("LINK_NOTIFICATION");
					this.OnLINK_NOTIFICATIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EXPIRE_DATE", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> EXPIRE_DATE
		{
			get
			{
				return this._EXPIRE_DATE;
			}
			set
			{
				if ((this._EXPIRE_DATE != value))
				{
					this.OnEXPIRE_DATEChanging(value);
					this.SendPropertyChanging();
					this._EXPIRE_DATE = value;
					this.SendPropertyChanged("EXPIRE_DATE");
					this.OnEXPIRE_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ONE_SHOT", DbType="Bit NOT NULL")]
		public bool ONE_SHOT
		{
			get
			{
				return this._ONE_SHOT;
			}
			set
			{
				if ((this._ONE_SHOT != value))
				{
					this.OnONE_SHOTChanging(value);
					this.SendPropertyChanging();
					this._ONE_SHOT = value;
					this.SendPropertyChanged("ONE_SHOT");
					this.OnONE_SHOTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LINK_STATUS", DbType="TinyInt NOT NULL")]
		public byte LINK_STATUS
		{
			get
			{
				return this._LINK_STATUS;
			}
			set
			{
				if ((this._LINK_STATUS != value))
				{
					this.OnLINK_STATUSChanging(value);
					this.SendPropertyChanging();
					this._LINK_STATUS = value;
					this.SendPropertyChanged("LINK_STATUS");
					this.OnLINK_STATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LINK_LINK_LOG", Storage="_LINK_LOGs", ThisKey="LINK_ID", OtherKey="LINK_ID")]
		public EntitySet<LINK_LOG> LINK_LOGs
		{
			get
			{
				return this._LINK_LOGs;
			}
			set
			{
				this._LINK_LOGs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_LINK", Storage="_USER", ThisKey="USERID", OtherKey="USERID", IsForeignKey=true)]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.LINKs.Remove(this);
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.LINKs.Add(this);
						this._USERID = value.USERID;
					}
					else
					{
						this._USERID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LINK_LOGs(LINK_LOG entity)
		{
			this.SendPropertyChanging();
			entity.LINK = this;
		}
		
		private void detach_LINK_LOGs(LINK_LOG entity)
		{
			this.SendPropertyChanging();
			entity.LINK = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LINK_LOG")]
	public partial class LINK_LOG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _LOG_ID;
		
		private System.Nullable<System.Guid> _LINK_ID;
		
		private System.DateTime _LOG_DATE;
		
		private string _REFERRER;
		
		private string _AGENT;
		
		private string _IP;
		
		private EntityRef<LINK> _LINK;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLOG_IDChanging(System.Guid value);
    partial void OnLOG_IDChanged();
    partial void OnLINK_IDChanging(System.Nullable<System.Guid> value);
    partial void OnLINK_IDChanged();
    partial void OnLOG_DATEChanging(System.DateTime value);
    partial void OnLOG_DATEChanged();
    partial void OnREFERRERChanging(string value);
    partial void OnREFERRERChanged();
    partial void OnAGENTChanging(string value);
    partial void OnAGENTChanged();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    #endregion
		
		public LINK_LOG()
		{
			this._LINK = default(EntityRef<LINK>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOG_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid LOG_ID
		{
			get
			{
				return this._LOG_ID;
			}
			set
			{
				if ((this._LOG_ID != value))
				{
					this.OnLOG_IDChanging(value);
					this.SendPropertyChanging();
					this._LOG_ID = value;
					this.SendPropertyChanged("LOG_ID");
					this.OnLOG_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LINK_ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LINK_ID
		{
			get
			{
				return this._LINK_ID;
			}
			set
			{
				if ((this._LINK_ID != value))
				{
					if (this._LINK.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLINK_IDChanging(value);
					this.SendPropertyChanging();
					this._LINK_ID = value;
					this.SendPropertyChanged("LINK_ID");
					this.OnLINK_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOG_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime LOG_DATE
		{
			get
			{
				return this._LOG_DATE;
			}
			set
			{
				if ((this._LOG_DATE != value))
				{
					this.OnLOG_DATEChanging(value);
					this.SendPropertyChanging();
					this._LOG_DATE = value;
					this.SendPropertyChanged("LOG_DATE");
					this.OnLOG_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_REFERRER", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string REFERRER
		{
			get
			{
				return this._REFERRER;
			}
			set
			{
				if ((this._REFERRER != value))
				{
					this.OnREFERRERChanging(value);
					this.SendPropertyChanging();
					this._REFERRER = value;
					this.SendPropertyChanged("REFERRER");
					this.OnREFERRERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AGENT", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string AGENT
		{
			get
			{
				return this._AGENT;
			}
			set
			{
				if ((this._AGENT != value))
				{
					this.OnAGENTChanging(value);
					this.SendPropertyChanging();
					this._AGENT = value;
					this.SendPropertyChanged("AGENT");
					this.OnAGENTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="NVarChar(20)")]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LINK_LINK_LOG", Storage="_LINK", ThisKey="LINK_ID", OtherKey="LINK_ID", IsForeignKey=true)]
		public LINK LINK
		{
			get
			{
				return this._LINK.Entity;
			}
			set
			{
				LINK previousValue = this._LINK.Entity;
				if (((previousValue != value) 
							|| (this._LINK.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LINK.Entity = null;
						previousValue.LINK_LOGs.Remove(this);
					}
					this._LINK.Entity = value;
					if ((value != null))
					{
						value.LINK_LOGs.Add(this);
						this._LINK_ID = value.LINK_ID;
					}
					else
					{
						this._LINK_ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("LINK");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USERS")]
	public partial class USER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _USERID;
		
		private string _E_MAIL;
		
		private string _USER_PASSWORD;
		
		private string _USERNAME;
		
		private System.DateTime _CREATE_DATE;
		
		private System.Nullable<System.DateTime> _UPDATE_DATE;
		
		private EntitySet<LINK> _LINKs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUSERIDChanging(System.Guid value);
    partial void OnUSERIDChanged();
    partial void OnE_MAILChanging(string value);
    partial void OnE_MAILChanged();
    partial void OnUSER_PASSWORDChanging(string value);
    partial void OnUSER_PASSWORDChanged();
    partial void OnUSERNAMEChanging(string value);
    partial void OnUSERNAMEChanged();
    partial void OnCREATE_DATEChanging(System.DateTime value);
    partial void OnCREATE_DATEChanged();
    partial void OnUPDATE_DATEChanging(System.Nullable<System.DateTime> value);
    partial void OnUPDATE_DATEChanged();
    #endregion
		
		public USER()
		{
			this._LINKs = new EntitySet<LINK>(new Action<LINK>(this.attach_LINKs), new Action<LINK>(this.detach_LINKs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USERID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid USERID
		{
			get
			{
				return this._USERID;
			}
			set
			{
				if ((this._USERID != value))
				{
					this.OnUSERIDChanging(value);
					this.SendPropertyChanging();
					this._USERID = value;
					this.SendPropertyChanged("USERID");
					this.OnUSERIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E_MAIL", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string E_MAIL
		{
			get
			{
				return this._E_MAIL;
			}
			set
			{
				if ((this._E_MAIL != value))
				{
					this.OnE_MAILChanging(value);
					this.SendPropertyChanging();
					this._E_MAIL = value;
					this.SendPropertyChanged("E_MAIL");
					this.OnE_MAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_PASSWORD", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string USER_PASSWORD
		{
			get
			{
				return this._USER_PASSWORD;
			}
			set
			{
				if ((this._USER_PASSWORD != value))
				{
					this.OnUSER_PASSWORDChanging(value);
					this.SendPropertyChanging();
					this._USER_PASSWORD = value;
					this.SendPropertyChanged("USER_PASSWORD");
					this.OnUSER_PASSWORDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USERNAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string USERNAME
		{
			get
			{
				return this._USERNAME;
			}
			set
			{
				if ((this._USERNAME != value))
				{
					this.OnUSERNAMEChanging(value);
					this.SendPropertyChanging();
					this._USERNAME = value;
					this.SendPropertyChanged("USERNAME");
					this.OnUSERNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CREATE_DATE", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CREATE_DATE
		{
			get
			{
				return this._CREATE_DATE;
			}
			set
			{
				if ((this._CREATE_DATE != value))
				{
					this.OnCREATE_DATEChanging(value);
					this.SendPropertyChanging();
					this._CREATE_DATE = value;
					this.SendPropertyChanged("CREATE_DATE");
					this.OnCREATE_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UPDATE_DATE", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> UPDATE_DATE
		{
			get
			{
				return this._UPDATE_DATE;
			}
			set
			{
				if ((this._UPDATE_DATE != value))
				{
					this.OnUPDATE_DATEChanging(value);
					this.SendPropertyChanging();
					this._UPDATE_DATE = value;
					this.SendPropertyChanged("UPDATE_DATE");
					this.OnUPDATE_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_LINK", Storage="_LINKs", ThisKey="USERID", OtherKey="USERID")]
		public EntitySet<LINK> LINKs
		{
			get
			{
				return this._LINKs;
			}
			set
			{
				this._LINKs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LINKs(LINK entity)
		{
			this.SendPropertyChanging();
			entity.USER = this;
		}
		
		private void detach_LINKs(LINK entity)
		{
			this.SendPropertyChanging();
			entity.USER = null;
		}
	}
}
#pragma warning restore 1591
